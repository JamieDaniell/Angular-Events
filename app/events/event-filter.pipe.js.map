{"version":3,"sources":["events/event-filter.pipe.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;YAGA,6BAA6B;YAC7B,kBAAkB;YAClB,wCAAwC;YACxC,kBAAkB;YAKlB;gBAAA;gBAaA,CAAC;gBAXG,qCAAqC;gBACrC,mDAAmD;gBACnD,6DAA6D;gBAC7D,0CAA0C;gBAC1C,mCAAS,GAAT,UAAU,KAAe,EAAE,IAAc;oBAErC,IAAI,MAAM,GAAW,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAAC;oBACxE,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,UAAC,KAAa;wBAC1C,OAAA,KAAK,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;oBAArD,CAAqD,CAAC,GAAG,KAAK,CAAC;gBAC9D,CAAC;gBAfL;oBAAC,WAAI,CAAC;wBACL,IAAI,EAAE,aAAa;qBACnB,CAAC;;mCAAA;gBAeF,sBAAC;YAAD,CAbA,AAaC,IAAA;YAbD,6CAaC,CAAA","file":"event-filter.pipe.js","sourcesContent":["import { PipeTransform, Pipe } from 'angular2/core';\nimport { IEvent } from './event';\n\n// defines a class as a pipe \n// filters results\n// for use in a template to pipe results\n// pipe decorator \n@Pipe({\n\tname: 'eventFilter'\n})\n\nexport class EventFilterPipe implements PipeTransform \n{\n    // get the string value to filter by \n    // if there is a filter value then filter the list \n    // otherwise there is no value so return full list of events \n    // arrow sytax defines the filter function\n    transform(value: IEvent[], args: string[]): IEvent[] \n    {\n        let filter: string = args[0] ? args[0].toLocaleLowerCase() : null;\n\t\treturn filter ? value.filter((event: IEvent) =>\n\t\t\tevent.name.toLocaleLowerCase().indexOf(filter) !== -1) : value;\n    }\n    \n}\n"]}