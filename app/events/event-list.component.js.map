{"version":3,"sources":["events/event-list.component.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;YAOA,0BAA0B;YAC1B,2DAA2D;YAc3D;gBAYI,mFAAmF;gBACnF,2BAA2B;gBAC3B,wDAAwD;gBACxD,uEAAuE;gBACvE,iFAAiF;gBACjF,yEAAyE;gBACzE,qDAAqD;gBACrD,4BAAoB,aAA2B;oBAA3B,kBAAa,GAAb,aAAa,CAAc;oBAjB/C,4EAA4E;oBAC5E,cAAS,GAAW,gBAAgB,CAAC;oBACrC,eAAU,GAAW,EAAE,CAAC;oBACxB,gBAAW,GAAW,CAAC,CAAC;oBACxB,cAAS,GAAY,KAAK,CAAC;gBAgB3B,CAAC;gBAED,wCAAW,GAAX;oBAEI,IAAI,CAAC,SAAS,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;gBACrC,CAAC;gBACD,yBAAyB;gBACzB,qCAAQ,GAAR;oBAAA,iBAKF;oBAHA,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE;yBAC5B,SAAS,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,MAAM,GAAG,MAAM,EAApB,CAAoB,EACzC,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,YAAY,GAAQ,KAAK,EAA9B,CAA8B,CAAC,CAAC;gBAC3C,CAAC;gBACE,iHAAiH;gBACjH,4CAAe,GAAf,UAAgB,OAAe;oBAEjC,IAAI,CAAC,SAAS,GAAG,cAAc,GAAG,OAAO,CAAC;gBAC3C,CAAC;gBApDF;oBAAC,gBAAS,CAAE;wBACR,WAAW,EAAE,sCAAsC;wBACnD,SAAS,EAAE,CAAC,qCAAqC,CAAC;wBAClD,KAAK,EAAE,CAAC,mCAAe,CAAC;wBACxB,UAAU,EAAE,CAAC,gCAAc,EAAE,0BAAiB,CAAC;qBAClD,CAAC;;sCAAA;gBAiDF,yBAAC;YAAD,CAzCA,AAyCC,IAAA;YAzCD,mDAyCC,CAAA","file":"event-list.component.js","sourcesContent":["import { Component, OnInit } from 'angular2/core'; // need to import OnInit\nimport { IEvent } from './event'; // import the Ievent Interface\nimport { EventFilterPipe } from './event-filter.pipe'; /// import the pipe\nimport { ThumbComponent } from '../shared/thumb.component';\nimport { EventService }\tfrom './event.service';\nimport { ROUTER_DIRECTIVES } from 'angular2/router';\n\n// styleUrls = add styles \n// pipes ~ like filters taken from the event-filter.pipe.ts\n@Component ({\n    templateUrl: 'app/events/event-list.component.html',\n    styleUrls: ['app/events/event-list.component.css'],\n    pipes: [EventFilterPipe],\n    directives: [ThumbComponent, ROUTER_DIRECTIVES]\n})\n\n// OnInit -> performs component initialisation and retreives data \n// OnChanges -> perform actions after change to input properties\n// OnDestroy -> clean up before desturction\n\n\n// OnInit is an interface\nexport class EventListComponent implements OnInit \n{ \n    // page title is bound to the read only interpolation variable {{pageTitle}}\n    pageTitle: string = '+ Event List +';\n    imageWidth: number = 50;\n    imageMargin: number = 2;\n    showImage: boolean = false;\n    searchCriteria: string;\n    // variable to hold events ( can be any[] if type is not know )\n    events: IEvent[]; // an array of events\n    errorMessage: string;\n    \n    // typescript --> every class has a constructor that runs when the class is created\n    // so if we want to inject \n    // dependancy injection creates an instance of myService\n    // class receives the instance of the service it needs ( dependencies )\n    // can make a variable to hold the injected service i.e - private: -eventservice \n    // then set the value in the constructor --> _eventService = eventService\n    // but shorthand define in the constructor definition\n    constructor(private _eventService: EventService) \n    {\n\n    } \n            \n    toggleImage(): void \n    {\n        this.showImage = !this.showImage;\n    }\n    // what happens when init\n    ngOnInit(): void \n    {\n\t\tthis._eventService.getEvents()\n\t\t\t.subscribe(events => this.events = events,\n\t\t\terror => this.errorMessage = <any>error);\n\t}\n    // when notify occurs from the thumb event emitter the onRatingClicked function is calles with the event argument\n    onRatingClicked(message: string): void \n    {\n\t\tthis.pageTitle = 'Event List: ' + message;\n\t}\n\t\n}\n"]}